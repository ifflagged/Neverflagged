/**
 * Thanks to & modified from 
 * https://github.com/Loon0x00/LoonScript/blob/main/MediaCheck/nf_check.js?raw=true
 * 
 * ËÑöÊú¨ÂäüËÉΩÔºöËäÇÁÇπNetFlixÊîØÊåÅÊü•ËØ¢
 * For Loon 373+ Only, Â∞è‰∫é373ÁâàÊú¨‰ºöÊúâbug
 * Êõ¥Êñ∞‰∫éÔºö2022-04-12
 * 
 * generic script-path=https://raw.githubusercontent.com/Loon0x00/LoonScript/main/MediaCheck/nf_check.js, tag=Netflix-Ëß£ÈîÅÊü•ËØ¢, img-url=checkmark.seal.system
 */

 const NF_BASE_URL = "https://www.netflix.com/title/81215567";

var inputParams = $environment.params;
var nodeName = inputParams.node;

let flags = new Map([[ "AC" , "üá¶üá®" ] ,["AE","üá¶üá™"], [ "AF" , "üá¶üá´" ] , [ "AI" , "üá¶üáÆ" ] , [ "AL" , "üá¶üá±" ] , [ "AM" , "üá¶üá≤" ] , [ "AQ" , "üá¶üá∂" ] , [ "AR" , "üá¶üá∑" ] , [ "AS" , "üá¶üá∏" ] , [ "AT" , "üá¶üáπ" ] , [ "AU" , "üá¶üá∫" ] , [ "AW" , "üá¶üáº" ] , [ "AX" , "üá¶üáΩ" ] , [ "AZ" , "üá¶üáø" ] , ["BA", "üáßüá¶"], [ "BB" , "üáßüáß" ] , [ "BD" , "üáßüá©" ] , [ "BE" , "üáßüá™" ] , [ "BF" , "üáßüá´" ] , [ "BG" , "üáßüá¨" ] , [ "BH" , "üáßüá≠" ] , [ "BI" , "üáßüáÆ" ] , [ "BJ" , "üáßüáØ" ] , [ "BM" , "üáßüá≤" ] , [ "BN" , "üáßüá≥" ] , [ "BO" , "üáßüá¥" ] , [ "BR" , "üáßüá∑" ] , [ "BS" , "üáßüá∏" ] , [ "BT" , "üáßüáπ" ] , [ "BV" , "üáßüáª" ] , [ "BW" , "üáßüáº" ] , [ "BY" , "üáßüáæ" ] , [ "BZ" , "üáßüáø" ] , [ "CA" , "üá®üá¶" ] , [ "CF" , "üá®üá´" ] , [ "CH" , "üá®üá≠" ] , [ "CK" , "üá®üá∞" ] , [ "CL" , "üá®üá±" ] , [ "CM" , "üá®üá≤" ] , [ "CN" , "üá®üá≥" ] , [ "CO" , "üá®üá¥" ] , [ "CP" , "üá®üáµ" ] , [ "CR" , "üá®üá∑" ] , [ "CU" , "üá®üá∫" ] , [ "CV" , "üá®üáª" ] , [ "CW" , "üá®üáº" ] , [ "CX" , "üá®üáΩ" ] , [ "CY" , "üá®üáæ" ] , [ "CZ" , "üá®üáø" ] , [ "DE" , "üá©üá™" ] , [ "DG" , "üá©üá¨" ] , [ "DJ" , "üá©üáØ" ] , [ "DK" , "üá©üá∞" ] , [ "DM" , "üá©üá≤" ] , [ "DO" , "üá©üá¥" ] , [ "DZ" , "üá©üáø" ] , [ "EA" , "üá™üá¶" ] , [ "EC" , "üá™üá®" ] , [ "EE" , "üá™üá™" ] , [ "EG" , "üá™üá¨" ] , [ "EH" , "üá™üá≠" ] , [ "ER" , "üá™üá∑" ] , [ "ES" , "üá™üá∏" ] , [ "ET" , "üá™üáπ" ] , [ "EU" , "üá™üá∫" ] , [ "FI" , "üá´üáÆ" ] , [ "FJ" , "üá´üáØ" ] , [ "FK" , "üá´üá∞" ] , [ "FM" , "üá´üá≤" ] , [ "FO" , "üá´ÔøΩ" ] , [ "FR" , "üá´üá∑" ] , [ "GA" , "üá¨üá¶" ] , [ "GB" , "üá¨üáß" ] , [ "HK" , "üá≠üá∞" ] ,["HU","üá≠üá∫"], [ "ID" , "üáÆüá©" ] , [ "IE" , "üáÆüá™" ] , [ "IL" , "üáÆüá±" ] , [ "IM" , "üáÆüá≤" ] , [ "IN" , "üáÆüá≥" ] , [ "IS" , "üáÆüá∏" ] , [ "IT" , "üáÆüáπ" ] , [ "JP" , "üáØüáµ" ] , [ "KR" , "üá∞üá∑" ] , [ "LU" , "üá±üá∫" ] , [ "MO" , "üá≤üá¥" ] , [ "MX" , "üá≤üáΩ" ] , [ "MY" , "üá≤üáæ" ] , [ "NL" , "üá≥üá±" ] , [ "PH" , "üáµüá≠" ] , [ "RO" , "üá∑üá¥" ] , [ "RS" , "üá∑üá∏" ] , [ "RU" , "üá∑üá∫" ] , [ "RW" , "üá∑üáº" ] , [ "SA" , "üá∏üá¶" ] , [ "SB" , "ÔøΩÔøΩüáß" ] , [ "SC" , "üá∏üá®" ] , [ "SD" , "üá∏üá©" ] , [ "SE" , "üá∏üá™" ] , [ "SG" , "üá∏üá¨" ] , [ "TH" , "üáπüá≠" ] , [ "TN" , "üáπüá≥" ] , [ "TO" , "üáπüá¥" ] , [ "TR" , "üáπüá∑" ] , [ "TV" , "üáπüáª" ] , [ "TW" , "üá®üá≥" ] , [ "UK" , "üá¨üáß" ] , [ "UM" , "üá∫üá≤" ] , [ "US" , "üá∫üá∏" ] , [ "UY" , "üá∫üáæ" ] , [ "UZ" , "üá∫üáø" ] , [ "VA" , "üáªüá¶" ] , [ "VE" , "üáªüá™" ] , [ "VG" , "üáªüá¨" ] , [ "VI" , "üáªüáÆ" ] , [ "VN" , "üáªüá≥" ] , [ "ZA" , "üáøüá¶"]])

let result = {
    "title": 'Netflix Check',
    "Netflix": 'Check Failed'
}

let arrow = " ‚ûü "

console.log("start execute");
nfTest().then(value => {
    let content = "-----------------------------------</br>"+([result["Netflix"]]).join("</br></br>")
    content = content + "</br>-----------------------------------</br>"+"<font color=#CD5C5C>"+ nodeName+ "</font>"
    content =`<p style="text-align: center; font-family: -apple-system; font-size: large; font-weight: thin">` + content + `</p>`
    console.log(content);
    $done({"title":result["title"],"htmlMessage":content})
}).catch (values => {
    console.log("reject:" + values);
    let content = "-----------------------------------</br>"+([result["Netflix"]]).join("</br></br>")
    content = content + "</br>-----------------------------------</br>"+"<font color=#CD5C5C>"+ nodeName+ "</font>"
    content =`<p style="text-align: center; font-family: -apple-system; font-size: large; font-weight: thin">` + content + `</p>`
    $done({"title":result["title"],"htmlMessage":content})
})

function nfTest() {
    return new Promise((resolve, reject) => {
        let params = {
            url: NF_BASE_URL,
            node: nodeName,
            timeout: 8000, //ms
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36',
            }
        }
        console.log("start request:" + JSON.stringify(params));
        $httpClient.get(params, (errormsg,response,data) => {
            console.log("----------NetFlix--------------");
            if (errormsg) {
                console.log("NF request failed:" + errormsg);
                resolve(errormsg);
                return;
            }
            if (response.status == 403) {
                result["Netflix"] = "<b>‚ùé </b> Unavailable"
                resolve("403 Not Available");
            } else if (response.status == 404) {
                result["Netflix"] = "<b>‚ö†Ô∏è </b> Original Netflix"
                resolve("404 Not Found");
            } else if (response.status == 200) {
                console.log("NF request result:" + JSON.stringify(response.headers));
                let ourl = response.headers['X-Originating-URL']
                if (ourl == undefined) {
                    ourl = response.headers['X-Originating-Url']
                }
                console.log("X-Originating-URL:" + ourl)
                let region = ourl.split('/')[3]
                region = region.split('-')[0];
                if (region == 'title') {
                    region = 'us'
                }
                result["Netflix"] = "<b>‚úÖ </b> Full Netflix in "+flags.get(region.toUpperCase())
                resolve(region);
            } else {
                result["Netflix"] = "<b>‚ùóÔ∏è </b> Check Failed";
                resolve(response.status)
            }
        })
    })
}
